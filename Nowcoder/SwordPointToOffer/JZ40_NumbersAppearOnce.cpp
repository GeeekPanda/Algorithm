/*
    题目：
        一个整型数组里除了两个数字只出现一次，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。
    思路：
        简化问题：如果除了一个数字以外，其他数字都出现了两次，那么如何找到出现一次的数字？
        答案很简单：全员进行异或操作即可。
        考虑异或操作的性质：对于两个操作数的每一位，相同结果为0，不同结果为1。
        那么在计算过程中，成对出现的数字的所有位会两两抵消为0，最终得到的结果就是那个出现了一次的数字。
        那么这一方法如何扩展到找出两个出现一次的数字呢？
        如果我们可以把所有数字分成两组，使得：
            1. 两个只出现一次的数字在不同的组中；
            2. 相同的数字会被分到相同的组中。
        那么对两个组分别进行异或操作，即可得到答案的两个数字。这是解决这个问题的关键。
        那么如何实现这样的分组呢？
        记这两个只出现了一次的数字为a和b，那么所有数字异或的结果就等于a和b异或的结果，我们记为x。
        如果我们把x写成二进制的形式，如果某个二进制位为0，则表明a和b中这一位相同；为1则表明不同。
        假设我们任选一个不为0的二进制位，按照该位给原来的序列分组，如果该位为0就分在第一组，否则
        就分到第二组，这样就可以满足上面两个条件，为什么呢？
            1. 首先，两个相同的数字的对应位都是相同的。
               所以一个被分到了某一组，另一个必然被分到这一组，所以满足了条件 2。
            2. 我们选的是一个在异或结果中为1的位，这表明a和b这两个只出现一次的数字的这一位不一样，
               必然一个是0，一个是1，所以可以保证a和b分在不同的组，即满足了条件 1。
*/

vector<int> FindNumsAppearOnce(vector<int>& array){
    int result_xor = 0;
    for(int num : array)
        result_xor ^= num;
    int divide = 1;
    while((divide & result_xor) == 0)
        divide <<= 1;
    int a = 0;
    int b = 0;
    for(int num : array){
        if(divide & num)
            a ^= num;
        else
            b ^= num;
    }
    if(a < b)
        return {a, b};
    else
        return {b, a};
}