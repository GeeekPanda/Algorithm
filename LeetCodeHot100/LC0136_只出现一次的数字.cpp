/*
    难度：简单

    题目：给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。
         找出那个只出现了一次的元素。
    
    思路：使用位运算。对于这道题，可使用异或运算 \oplus⊕。异或运算有以下三个性质。
            1. 任何数和0做异或运算，结果仍然是原来的数，即 a^0=a。
            2. 任何数和其自身做异或运算，结果是0，即 a^a=0。
            3. 异或运算满足交换律和结合律，即 a^b^a=b^a^a=b^(a^a)=b^0=b。
         所以，数组中的全部元素的异或运算结果即为数组中只出现一次的数字。
*/

int singleNumber(vector<int>& nums){
    int ret = 0;
    for(int ele : nums)
        ret ^= ele;
    return ret;
}